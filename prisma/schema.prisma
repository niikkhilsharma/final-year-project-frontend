generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  Customer
  Seller
  Admin
}

model Shop {
  id        String   @id @default(cuid())
  name      String
  url       String
  address   String
  mainImage String
  images    String[]
  userId    String   @unique
  User      User     @relation(fields: [userId], references: [id])
}

model User {
  id            String          @id @default(cuid())
  role          UserRole
  firstName     String
  lastName      String
  emailVerified DateTime?
  image         String?
  address       String?
  email         String          @unique
  password      String
  gender        String?
  dob           DateTime?
  phoneNo       String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  shopId        String?
  Shop          Shop?
  orders        Order[]
  refreshTokens RefreshToken[]
  Address       Address[]
  Account       Account[]
  Session       Session[]
  Authenticator Authenticator[]
  Product       Product[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

enum CategoryEnum {
  Electronics
  Clothing
  Accessories
  Home
  Sports
  Toys
  Beauty
  Books
}

model Product {
  id          String        @id @default(cuid())
  name        String
  description String
  price       Float
  stock       Int
  createdById String
  category    CategoryEnum
  color       Color[]
  mainImage   String
  images      String[]
  OrderedItem OrderedItem[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  User        User?         @relation(fields: [userId], references: [id])
  userId      String?
}

model Subscription {
  id        Int      @id @default(autoincrement())
  type      String
  startDate DateTime
  endDate   DateTime
  status    String
}

model Order {
  id              String        @id @default(cuid())
  userId          String
  paymentMethodId Int
  totalAmount     Float
  discountAmount  Float?
  netAmount       Float
  status          String
  paymentStatus   String
  transactionId   Int
  createdAt       DateTime      @default(now())
  user            User          @relation(fields: [userId], references: [id])
  orderItems      OrderedItem[]
}

model OrderedItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PaymentMethod {
  id   Int    @id @default(autoincrement())
  type String
}

model Payment {
  id              Int      @id @default(autoincrement())
  paymentMethodId Int
  orderId         Int
  date            DateTime @default(now())
  amount          Float
  status          String
}

model Address {
  id           String @id @default(cuid())
  userId       String
  addressLine1 String
  addressLine2 String
  city         String
  state        String
  zipCode      String
  country      String
  user         User   @relation(fields: [userId], references: [id])
}

model Country {
  id   String @id @default(cuid())
  name String
}

model Color {
  id        String   @id @default(cuid())
  name      String
  codeHex   String
  Product   Product? @relation(fields: [productId], references: [id])
  productId String?
}
